// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Response struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type AuthRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *AuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRequest.Unmarshal(m, b)
}
func (m *AuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRequest.Marshal(b, m, deterministic)
}
func (m *AuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRequest.Merge(m, src)
}
func (m *AuthRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRequest.Size(m)
}
func (m *AuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRequest proto.InternalMessageInfo

func (m *AuthRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *AuthRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AuthRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type DeleteBucketRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBucketRequest) Reset()         { *m = DeleteBucketRequest{} }
func (m *DeleteBucketRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBucketRequest) ProtoMessage()    {}
func (*DeleteBucketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *DeleteBucketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBucketRequest.Unmarshal(m, b)
}
func (m *DeleteBucketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBucketRequest.Marshal(b, m, deterministic)
}
func (m *DeleteBucketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBucketRequest.Merge(m, src)
}
func (m *DeleteBucketRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteBucketRequest.Size(m)
}
func (m *DeleteBucketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBucketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBucketRequest proto.InternalMessageInfo

func (m *DeleteBucketRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *DeleteBucketRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type IpRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpRequest) Reset()         { *m = IpRequest{} }
func (m *IpRequest) String() string { return proto.CompactTextString(m) }
func (*IpRequest) ProtoMessage()    {}
func (*IpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *IpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpRequest.Unmarshal(m, b)
}
func (m *IpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpRequest.Marshal(b, m, deterministic)
}
func (m *IpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpRequest.Merge(m, src)
}
func (m *IpRequest) XXX_Size() int {
	return xxx_messageInfo_IpRequest.Size(m)
}
func (m *IpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IpRequest proto.InternalMessageInfo

func (m *IpRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func init() {
	proto.RegisterType((*Response)(nil), "grpc.Response")
	proto.RegisterType((*AuthRequest)(nil), "grpc.AuthRequest")
	proto.RegisterType((*DeleteBucketRequest)(nil), "grpc.DeleteBucketRequest")
	proto.RegisterType((*IpRequest)(nil), "grpc.IpRequest")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xff, 0xd9, 0xf6, 0x2f, 0xc9, 0x14, 0x22, 0x8e, 0x1e, 0x62, 0xbc, 0x48, 0x4e, 0x82,
	0x90, 0x83, 0xbd, 0x88, 0x9e, 0x52, 0x45, 0x28, 0x08, 0x42, 0x2e, 0x9e, 0x63, 0x32, 0xb4, 0x4b,
	0x62, 0x76, 0xdc, 0xdd, 0xe0, 0x97, 0xf4, 0x43, 0x49, 0xb2, 0x24, 0x28, 0x94, 0x62, 0x8f, 0xb3,
	0xef, 0xfd, 0xe6, 0xed, 0x5b, 0x16, 0x82, 0x82, 0x65, 0xca, 0x5a, 0x59, 0x85, 0xf3, 0x8d, 0xe6,
	0x32, 0x89, 0xc1, 0xcf, 0xc9, 0xb0, 0x6a, 0x0d, 0x61, 0x08, 0x42, 0xd5, 0x91, 0x77, 0xe9, 0x5d,
	0xf9, 0xb9, 0x50, 0x75, 0xf2, 0x02, 0x8b, 0xac, 0xb3, 0xdb, 0x9c, 0x3e, 0x3a, 0x32, 0x16, 0xcf,
	0xe0, 0x7f, 0xa3, 0x36, 0xb2, 0x1d, 0x1c, 0x41, 0xee, 0x06, 0x8c, 0xc1, 0xe7, 0xc2, 0x98, 0x4f,
	0xa5, 0xab, 0x48, 0x0c, 0xc2, 0x34, 0xf7, 0x0b, 0x25, 0x47, 0xb3, 0xe1, 0x54, 0x48, 0x4e, 0xee,
	0xe1, 0xf4, 0x91, 0x1a, 0xb2, 0xb4, 0xea, 0xca, 0x9a, 0xec, 0xfe, 0xc5, 0x0e, 0x16, 0x13, 0x7c,
	0x01, 0xc1, 0x9a, 0x47, 0xc4, 0x89, 0xde, 0x28, 0xde, 0x7c, 0x09, 0x98, 0x65, 0x2c, 0xf1, 0x0e,
	0x16, 0x0f, 0x0d, 0x15, 0xda, 0x05, 0xe0, 0x79, 0xda, 0x97, 0x4c, 0x77, 0x84, 0xc6, 0xa1, 0x93,
	0xc6, 0xf2, 0xc9, 0x3f, 0xbc, 0x86, 0x79, 0x5f, 0x17, 0x4f, 0x9c, 0xf2, 0xa3, 0xfa, 0x0e, 0xf3,
	0x12, 0xc2, 0xac, 0xaa, 0xd6, 0xed, 0xaa, 0x29, 0xca, 0xfa, 0x59, 0x1a, 0x8b, 0xc7, 0xce, 0x33,
	0xdd, 0x71, 0x0f, 0xf4, 0xba, 0x95, 0x96, 0xfe, 0x0a, 0xdd, 0x8e, 0x8f, 0xf6, 0xa4, 0xd5, 0xfb,
	0x41, 0x71, 0xbf, 0xc8, 0x43, 0x32, 0xdf, 0x8e, 0x86, 0x2f, 0xb2, 0xfc, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x2f, 0xb5, 0x11, 0xaa, 0x2f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	ClearBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*Response, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Response, error)
	AddInBlackList(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error)
	AddInWhiteList(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteFromBlackList(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteFromWhiteList(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) ClearBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.Api/ClearBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.Api/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) AddInBlackList(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.Api/AddInBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) AddInWhiteList(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.Api/AddInWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteFromBlackList(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.Api/DeleteFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteFromWhiteList(ctx context.Context, in *IpRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.Api/DeleteFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	ClearBucket(context.Context, *DeleteBucketRequest) (*Response, error)
	Auth(context.Context, *AuthRequest) (*Response, error)
	AddInBlackList(context.Context, *IpRequest) (*Response, error)
	AddInWhiteList(context.Context, *IpRequest) (*Response, error)
	DeleteFromBlackList(context.Context, *IpRequest) (*Response, error)
	DeleteFromWhiteList(context.Context, *IpRequest) (*Response, error)
}

// UnimplementedApiServer can be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (*UnimplementedApiServer) ClearBucket(ctx context.Context, req *DeleteBucketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearBucket not implemented")
}
func (*UnimplementedApiServer) Auth(ctx context.Context, req *AuthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedApiServer) AddInBlackList(ctx context.Context, req *IpRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInBlackList not implemented")
}
func (*UnimplementedApiServer) AddInWhiteList(ctx context.Context, req *IpRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInWhiteList not implemented")
}
func (*UnimplementedApiServer) DeleteFromBlackList(ctx context.Context, req *IpRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromBlackList not implemented")
}
func (*UnimplementedApiServer) DeleteFromWhiteList(ctx context.Context, req *IpRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromWhiteList not implemented")
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_ClearBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ClearBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Api/ClearBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ClearBucket(ctx, req.(*DeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Api/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_AddInBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).AddInBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Api/AddInBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).AddInBlackList(ctx, req.(*IpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_AddInWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).AddInWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Api/AddInWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).AddInWhiteList(ctx, req.(*IpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Api/DeleteFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteFromBlackList(ctx, req.(*IpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Api/DeleteFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteFromWhiteList(ctx, req.(*IpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearBucket",
			Handler:    _Api_ClearBucket_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Api_Auth_Handler,
		},
		{
			MethodName: "AddInBlackList",
			Handler:    _Api_AddInBlackList_Handler,
		},
		{
			MethodName: "AddInWhiteList",
			Handler:    _Api_AddInWhiteList_Handler,
		},
		{
			MethodName: "DeleteFromBlackList",
			Handler:    _Api_DeleteFromBlackList_Handler,
		},
		{
			MethodName: "DeleteFromWhiteList",
			Handler:    _Api_DeleteFromWhiteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
